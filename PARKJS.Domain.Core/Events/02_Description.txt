
MediatR 에 대한 기본 설정을 먼저 한다.
Event property, Notification property 등을 정의한다.


public class NewUser: IRequest<bool>  
{  
    public string Username { get; set; }  
    public string Password { get; set; }          
}  


public class NewUserHandler : IRequestHandler<NewUser, bool>  
{         
    public Task<bool> Handle(NewUser request, CancellationToken cancellationToken)  
    {  
        // save to database  
        return Task.FromResult(true);  
    }  
}  


public class HomeController : Controller  
{  
    private readonly IMediator _mediator;  
  
    public HomeController(IMediator mediator)  
    {  
        _mediator = mediator;  
    }

    [HttpGet]  
    public ActionResult Register()  
    {  
        return View();  
    }  
  
    [HttpPost]  
    public ActionResult Register(NewUser user)  
    {  
        bool result = _mediator.Send(user).Result;  
  
        if (result)  
            return RedirectToAction("Login");  
              
        return View();  
    }  
}

============================================================

public class NewUser : INotification  
{  
    public string Username { get; set; }  
    public string Password { get; set; }  
} 


public class NewUserHandler : INotificationHandler<NewUser>  
{  
    public Task Handle(NewUser notification, CancellationToken cancellationToken)  
    {  
        //Save to log  
        Debug.WriteLine(" ****  Save user in database  *****");  
        return Task.FromResult(true);  
    }  
}


public class EmailHandler : INotificationHandler<NewUser>  
{  
    public Task Handle(NewUser notification, CancellationToken cancellationToken)  
    {  
        //Send email  
        Debug.WriteLine(" ****  Email sent to user  *****");  
        return Task.FromResult(true);  
    }  
}  


public class LogHandler : INotificationHandler<NewUser>  
{  
    public Task Handle(NewUser notification, CancellationToken cancellationToken)  
    {  
        //Save to log  
        Debug.WriteLine(" ****  User save to log  *****");  
        return Task.FromResult(true);  
    }  
}


public class AccountsController : Controller  
{  
    private readonly IMediator _mediator;  
    public AccountsController(IMediator mediator)  
    {  
        _mediator = mediator;  
    }  

    [HttpGet]  
    public ActionResult Login()  
    {  
        return View();  
    }  

    [HttpGet]  
    public ActionResult Register()  
    {  
        return View();  
    }  
  
    [HttpPost]  
    public ActionResult Register(NewUser user)  
    {  
        _mediator.Publish(user);  
        return RedirectToAction("Login");  
    }  
}